1.04:可以在登陆文件中定义自动载入的脚本和自动开启的功能。
1.08:当脚本的Name设为$Name,ID设为$ID时,将会替换为当前登录的人物的名字和ID。
	#G命令问题较多,已暂时删除。
1.09:显示装备的装备状态。防卡改为60秒。显示私聊。
1.10:文字方式显示技能。人物的昏迷抽筋中毒发呆掉线打坐状态的显示。
1.16:可以自定义字体和背景颜色,可以在菜单手动设置也可以在登录文件中设置。
1.22:在客户端中手动设定的颜色会被写入到登陆文件中。
1.23:记录功能。可以在登陆文件中设置,也可以手动打开。保存为ID-日期.txt文件。
1.24:技能列表显示。
1.25:双击弹出菜单。菜单的命令定义在menu.txt中。menu.txt须和exe文件放在一起。
1.30:加入静默模式。静默模式下不显示各种信息,但是可以正常触发和记录。可以在登陆文件中定义。
1.31:优先搜索各个列表中序号排前的项目,而不是场景中从上到下扫描。
1.32:静默模式时可以显示物品状态技能。
1.33:更换正则表达式引擎。
1.34:更换脚本读取方法。
1.36:恢复!Give命令。
1.37:give @@ to xxx不会给Nosell列表中的物品。Nosell列表支持正则表达式和通配符。
1.38:限制可能无限向服务器发送命令的指令,!Give !Sell !Buy !Heal只能同时进行一个。
1.39:Explorer.exe重新启动时重建托盘图标。
1.40:新增对象@1~@n,指向场景列表的第1到第n项。对技能按字母进行排序。
1.41:加入--对象的变形-=。-=对象在场景中从下往上搜索Enemys列表中的目标。
1.42:新命令!exit，用于关闭客户端。技能列表中用*)标记组合的空手技能。
1.43:新命令!Drop，用于往柜子里扔东西，用法和!Give相同。/get命令可以直接拿柜子里的东西。
1.44:恢复#G命令。
1.45:加入!buy命令新用法,用于购买玩家出售的物品。格式:!buy<价格 物品名称,数量 或者 !buy<=价格 物品名称,数量。数量可以省略。名称需要全称,不能使用通配符。对非玩家使用这个格式的命令可能导致出错。
1.46:记录文件保存在新建的log目录下。直接打开客户端可以选择打开登录文件。
1.47:!Load命令,格式!Load(脚本绝对路径或相对路径),脚本文件扩展名不能少,L为大写。
1.48:!set命令支持加减法。比如!set var+5,!set var-6。
1.49:加入命令!Text,格式为!Text xxxx,作用为添加内容到文本中,仅自己可见,可用于触发。修复脚本中可以使用/t命令。可以手动输入和脚本中相同格式的多个命令。
1.50:命令中可以使用!set的变量值,方法是把变量名用中括号括起来。例子:!set 动作 practice;!set 参数 dodge;/[动作] [参数]。
1.51:1.50更新的功能中,可以使用加减法。格式[var1+var2]或[var1-var2]。
1.52:加入列表Seek。格式如下面的例子,需要严格的正则表达式语法,不能使用简单的*?通配符,同时注意正则表达式的特殊字符。
在打开触发后,自动搜索列表中的文字,匹配以后把指定位置的数字储存在变量中,可以用!set查看或者通过[var]表达式在命令中使用。另外,变量名不能使用中文。
[Seek]
Seek_NUM=10
Seek_1=此次战斗耗时[time]秒，获得[exp]点经验。
[Share_1]
Msg=此次战斗耗时*
Cmd=!set total [exp+total];/say 总共获得[total]经验;
Obj=;;
Tmr=500

1.53:menu.txt菜单支持中文描述,格式为 命令:描述。参考附带的menu.txt。
1.54:如果命令、触发、列表最前面为R,则标记为纯粹的正则表达式,不解析*?通配符。命令最前加上R标记则不解析set变量,解决命令中[]变量和正则表达式冲突问题.
1.55:加入记录开关$r1和$r0,分别是打开、关闭记录。记录开关时加入时间标记。

1.56:!no命令加入对列表的判断。可以是!no @@,命令;或者!no --,命令;,分别搜索Goods列表和Enemys列表.列表中所有对象都不存在才执行命令,并跳过后面的命令,如果有一个存在就执行后面的命令.
加入!has命令,用法和!no相同,但是判断方法相反.
加入命令!if,格式!if aaa==bbb,命令;其他命令;==代表相等,还可以是>大于、>=大于等于、<小于、<=小于等于、!=不等于,其中大于小于只用于数字。可以使用[变量]。条件成立则执行命令,并跳过后面的命令,否则执行后面的命令.

1.57:加入命令!sset,是!set的安静版,用法和!set相同,不同点在于!sset设置变量时不显示文字,仅进行变量的赋值.

1.58:加入机器人内部变量,用于显示一些游戏内部的信息,这些变量由下划线_开头,不能通过!set和!sset改变.
这些变量有[_等级]、[_力量]、[_体质]、[_智慧]、[_敏捷]、[_场景]、[_加力].

1.59:give命令可以往柜子里丢东西.
时空位置加入使用回城卷轴.
加入内部变量[_时间]、[_星期]

1.60:!set命令不再显示内部变量,!sset命令仍然可以显示,!if不受影响.
1.61:[_时间]格式改为hhmmss,精度约为3秒
1.62:双击菜单和直接输入的命令支持$Name$ID$tie,支持分号分开的多个命令.
1.63:加入内部变量[_性别][_年龄][_声望][_脚本]。加入特殊用途内部变量[_EXP]，如果在Seek中把[_EXP]作为捕获变量会把数值统计到经验中。
1.64:加入命令!unset,用于删除!set设定的变量。
1.65:[变量]支持递归,如!set a b;!set b c;那么[[a]]==c。新命令!unsetall,删除所有用户变量。
1.66:中括号变量中的计算支持直接数字,或者变量数字混合。!set a [1+2];!set b [a-5]。
1.67:加入help命令,可以查询一些命令的说明和用法,输入命令或按F1显示。支持查看师傅的技能，命令为/skill
1.68:加入对登录文件进行简单加密的功能,在帮助菜单中选择。
1.69:客户端加入用代理服务器进行连接功能。具体方法为在登录文件中设置 代理、代理端口、代理用户名、代理密码  参数。代理用户名和密码没有可省略。目前貌似只支持socks5。
1.70:加入命令#n,n是数字。作用为暂停发送命令n毫秒。暂停可以被其他触发打断。手动输入或用批量管理工具发送该命令可能导致客户端假死。
更多帮助查阅客户端内建的帮助文件。
2.00:加入弹出菜单。柜子内的物品不再显示在场景中。原来的双击菜单改为右键菜单。颜色改为color.txt中定义。
2.01:1.恢复命令!Click(n)和!Click(x,y),前一个为点击菜单第n个,后面为点击菜单x,y坐标的项。x坐标一般要大于15小于210，y坐标40-55为第一项，56-71为第二项，以此类推。
     2.恢复!Num命令,格式!Num数字,用途为在!Click命令导致的数字输入框弹出以前指定数字框的数值。

2.02:新命令!Tip,格式!Tip 内容,在托盘中弹出气泡提示。

2.03:加入自动寻路命令!go,作用为在地图任何地点都能自动寻路到指定场景。路径文件在登录文件中定义 寻路=路径文件名,可以用专门的路径录制客户端录制。寻路分区的优先级为最低,即可以被公共分区和任何其他分区打断,被公共分区打断可以继续走路。
	对于Name1和出口名字不一样的地点,出口的格式为Outn=真实名字:出口名字

2.04:寻路路径文件中可自定义命令,并支持多个分号分开的命令,以达到一些特殊的场景。解决地名相同的场景的寻路问题。屏蔽血雨争锋区路径文件中一些危险或者平时不好到达的场景，修正一些路径错误。寻路完成后提示到达。优化寻路算法的内存占用。
2.05:寻路支持银月时空等飞的道具,自动检测身上是否带有物品。在路径文件中设置,格式见血雨争锋的路径。暂不支持$tie通配符。
2.06:向师傅请教技能时可以显示技能名字了。调整给物品时的物品顺序。增加法术的描述。去除准备技能时的不正确技能。
2.07:按住Ctrl键滚动滚轮可以调整对话框大小。窗口大小可自由调整,窗口控件跟着移动。
2.08:寻路命令加入新用法。!go>地名。用途为屏蔽时空银月等公共出口，一般用于没mp用时空时。中间没有空格。更新血雨争锋区的路径。
2.09:修复使用批量管理工具可能导致的客户端崩溃。增加帮助文件的内容。更新血雨争锋区的路径。删除古墓和日月任务的经验统计,古墓任务需要统计经验需要在脚本里设置seek[_EXP]。
2.10:恢复命令$o0和$o1,作用分别是关闭和开启防掉。登录文件加密方法改进。
2.11:新命令!outN,N可以是1~n,作用是模拟点击第n个出口,如不带N则随机选择出口。加入特殊内部变量[_随机]产生一个0-9999的随机数。

2.12:当触发的Tmr=0时,触发命令会马上执行,但命令中间可能被打断。
加入[变量]中的字符串处理函数,substr、len、find。
①substr，截取子字符串。格式[substr(字符串,开始位置,长度)],举例:[substr(abcde,2,2)],结果为cd。
②len,计算字符串的长度。格式[len(字符串)],举例:[len(abcd)],结果为4。
③find,在一个字符串中查找另一个字符串的位置。格式[find(原字符串,查找字符串,开始位置)],开始位置可以省略,省略默认为0。举例:[find(abcdebcde,bc)],结果为1，[find(abcdebcde,bc,2)],结果为5。

2.13:加入列表Notar，作用为在搜索@@，@E，--列表对象的时候排除Notar列表里的，支持通配符、正则表达式、$Name$ID。
示例:
[Notar]
Notar_num=99
Notar_1=断掉的*

2.14:加入命令!Addlist和!Dellist作用为动态增加、删除脚本中的列表，格式!Addlist(列表名,值)和!Dellist(列表名,值)。支持Seek、Enemys、Fight_room、Follow、Wupin、Nosell、Goods、Notar。

2.15:加入命令@Re。功能为重复上一个命令。

2.16:@Re命令增加重复前一个obj。@Re屏蔽手动输入的命令、防卡命令。屏蔽esc关闭客户端。
加入打开触发命令$t1
加入预处理命令列表PreCmd，作用为载入脚本以后自动发送列表中的命令。
格式:
[PreCmd]
PreCmd_Num=数量
PreCmd_Delay=载入脚本和发送命令之间的间隔,单位毫秒
PreCmd_1=命令1
PreCmd_2=命令2
PreCmd_3=命令3
…

2.17:!has和!no命令支持@E;
give命令加入给Nosell列表物品格式:give nosell to 目标
get命令增加目标#0，从场景中拿东西
use命令增加目标#$ID和#0，都能对玩家自己使用物品

2.18:增加触发文字中支持[变量]，语句前面要用 V@ 做标记。
示例:
Msg=V@你设置环境变量：a 为 [b]。

2.19:脚本中设置Hotkey时key可以使用按键的名称。支持A-Z,F1-F12,Num0-Num9(代表小键盘0-9),Left或←,Right或→,Up或↑,Down或↓,End,Home,Pageup,PageDown。
示例：
[Hotkey_1]
Key=F1
Cmd=/get;
Obj=;

加入内部变量_mp、_maxmp、_hp、_effhp、_maxhp。

PreCmd中支持快速设置变量。支持改变下划线_开头的变量。
示例：
PreCmd_1=_变量:set看不到

2.20:加入变量函数count，统计身上物品的数量，参数为物品名，可以带通配符。示例：[count(金币)]
加入变量函数skill，返回技能等级，参数为技能名。示例：[skill(基本躲闪)]、[skill(dodge)]
加入变量函数enabled，查询准备在基本上的高级。示例：[enabled(force)]

2.21:加入变量函数teamcount，返回战斗中指定队伍的人数或物品数，参数为0或1或-1，分别指战队0战队1和其他。示例：[teamcount(1)]

2.22:加入变量函数difftime，格式[difftime(时间1,时间2,s)]，计算从时间1到时间2的秒数，如需要计算相差的分钟数，格式是[difftime(时间1,时间2,m)],可跨天，时间格式为[_时间]的格式。示例：[difftime(083001,131500,s)]
加入变量函数addtime，格式[addtime(时间,秒数)]，返回时间加秒数后的值。示例[addtime(230000,7200)]
加入队长模式开关$p1和$p0

2.23:Seek加入命令。作用为Seek触发以后发送这些命令，不会拦截其他触发。格式Seek_NCmd=命令。
示例：
[Seek]
Seek_Num=2
Seek_1=你的临济庄运行完毕，将内力收回丹田。
Seek_1Cmd=!sset 激励 0
Seek_2=你微一凝神，运起临济庄，一声娇喝！
Seek_2Cmd=!sset 激励 1

2.24:可以观察容貌。可以私聊。脚本一行支持512字符。

2.25:!if增加格式!if>表达式,命令1;命令2;。作用为即使满足表达式执行命令1后也继续执行后面的命令。
将用西文逗号隔开的变量看作数组。
[变量]函数at,格式[at(数组,序号)]，取出数组的第序号个元素。序号从1开始。
函数indexOf,格式[indexof(数组,元素)]查找元素在数组中的序号。无法找到返回-1。
函数size，格式[size(数组)]返回数组的大小。
示例：有一数组id = 111,222,333,444,555，代表几个号的id，要求前一个号把自己的id私聊给下一个号。
Cmd=!sset i [indexof([id],$ID)];!if [i]==-1,!Text 错误;!sset i+1;!if>[i]>[size([id])],!sset i 1;/t [at([id],[i])];/tell $ID;

函数insert，格式[insert(数组,位置,元素)]返回一个数组，为原数组在位置处添加了元素后的结果。第一个元素前面的位置为0。示例[insert([id],2,666)]，结果为111,222,666,333,444,555
函数remove，格式[remove(数组,序号)]返回一个数组，为原数组移除第序号个元素后的结果。示例[remove([id],4)]，结果为111,222,333,555

2.26:加入命令!t，选择目标，和/t不同之处在于不能搜索列表@@--等列表，不能选择场景、自己和好友，可以搜索名字和ID，且可以使用统配符和正则表达式。
时空按钮支持Transobj含有通配符和正则表达式。
为防止!Give刷屏，一次!Give命令中，每堆物品最多给一次。

2.27:寻路命令!go加入mp判断，设置在寻路文件的公共出口下，只有大于等于设定的mp，才会使用公共出口。另：如因飞时空mp不会刷新，所以连续飞是无法判断的。

2.28:[teamcount()]不带参数返回玩家当前的队伍。不在战斗或观战是-1。
加入内部变量[_负重]储存负重的千分比。

2.29:加入变量函数equip判断物品是否装备着。格式[equip(物品ID)]。没有物品返回-1，没有装备返回0，否则返回物品装备的位置：1=头盔,2=左耳,3=右耳,4=耳环,5=颈,6=左手,7=右手,8=手,9=左腕,10=右腕,11=手腕,12=铠甲,13=腰带,14=靴子,15=斗篷,16=手套,17=双手,18=指环,19=衣服
[count()]支持物品ID。
扩展!t命令，格式!t 物品ID名字,命令;其他命令;如果!t能选到物品，则发送命令，忽略后面的命令。
!Addlist和!Dellist支持数组批量增加和删除。

2.30:加入三元运算符，格式[表达式?值1:值2]表达式为含有==或!=或>=或>或<=或<的比较表达式,表达式满足结果是值1，不满足结果是值2。例：[[a]>[b]?[a]:[b]]，获取a和b中较大的那个。
SeekCmd不会被@Re记录。
equip加入查询装备位置的物品id。如[equip(7)]返回右手武器的id，没有装备则为空。
变量函数max和min，格式[max(数组)][min(数组)]，返回数组中最大和最小的数。
变量[_follow]，检测队友到场的数量。队友为脚本中Follow列表定义。检测方法和队长模式相同。
加入命令!R XXX。作用为将XXX内容写到记录中，没有开启记录会暂时打开记录。
示例：
Seek_1=【表决】$Name\($ID\)投票关闭.*\([id]\)的闲聊频道，需要20票通过，还差.*票！
Seek_1Cmd=!R 被[id]攻击了。;
Seek_2=你押镖成功，获得了[exp]经验
Seek_2Cmd=!R 押镖成功，获得[exp]经验;

2.31:加入循环命令!for，格式!for次数,命令1:命令2:……。后面用冒号隔开多个命令发送次数次。新的触发会打断执行。命令间的延时为触发的Tmr。
加入列表Filter。内容为含通配符或正则表达式的文字。作用为过滤符合文字，不会显示在窗口中，不会记录，不会触发。在脚本调试版中可以看到哪些文字被过滤。
示例:
[Filter]
Filter_Num=2
Filter_1=【谣言】*
Filter_2=*\(*\)拍着张居正的肩膀，笑得嘴都合不起来了。
第一个为过滤谣言频道，第二个为过滤不是自己拍肩膀的表情。

2.32:!if和三元运算符的判断语句支持&&和||，分别是且和或。且是两个条件都满足，才判断为真，或是其中一个满足就判断为真。示例1:!if [_星期]==5&&[_时间]>150000,!exit  示例2:!if [_mp]<300||[_hp]<2000,!set 状态 去睡觉
teamcount在非战斗中如果目标是战斗，可以显示战队中的人数，无法显示观战人数。
修正暗器使用时装备位置显示错误。

2.33:命令!ping，用于测试延迟。两次ping之间需间隔1秒。
!Click加入新用法，!Click(快捷按钮的名称)。作用为模拟点击这个按钮。
修复许多导致崩溃的bug。

2.34:战斗中，@1指向其他位置第一个，@2指向第二个
[变量]函数has，格式[has(物品|数量)]或[has(物品)]，和!has逗号前的参数相同，找到物品值是1，找不到值是0。

2.35:加入载入寻路路径文件命令!loadroom。格式!loadroom(路径文件名)。
加入施法命令!c或!cast。可以用名称或者法术名字的一部分来施法。比如!c recover或!cast 散。
菜单点击施法和!cast施法优先施放基本招架上的技能。
加入表情命令!:D，是/:D的内部版本，效果差不多。

2.36:加入[变量]函数range，格式[range(起始,结束)]或[range(起始,结束,步长)]，生成一个数列。比如[range(1,11,2)]生成1,3,5,7,9,11
!for命令加入遍历数组的功能，格式!for 变量名 in 数组,命令1:命令2:…。例子：!sset a [range(1,5)];!for x in a,!Text [x]
!for循环自然完成时加入提示。

2.37:对请教界面和买东西界面菜单进行排序。
!buy命令支持通配符和正则表达式以及Goods列表（使用@@做物品名)。

2.38:提高计算经验和防卡时间精度，防止电脑时钟不准确导致计算问题。
触发关闭时不显示防卡信息。
补充大量帮助信息。

2.39:加入命令@goto，格式@goto(触发名)，作用为直接跳转到那个触发，执行触发的命令。例如:@goto(Share_1)，@goto(Triger5_2)。跳转到另一个分区的触发时，默认当作也触发那个分区。跳转的间隔是触发的Tmr参数，也可被其他触发打断。触发名不分大小写。@goto命令后面如有其他命令，全部忽略。
效率计算时间返回低精度，以免可变频CPU导致时间计算错误。

2.40:!unset支持通配符和正则表达式，用于批量删除变量。
加入变量[_中毒]，中毒时这个值为1，未中毒时为空。

2.41:加入保存变量功能，需要在登陆文件中打开开关，格式为 保存变量=开 。内容保存在vars[登录文件名].txt中。不保存下划线_开头的变量。

2.42:加入本地私聊命令!tell。格式为!tell ID,内容。只能发送给在同一个系统下其他号。特点是没延迟，内容可以重复。

2.43:!for命令支持!if下面含有特殊的break指令，作用为打断循环。例子:!for100,!set i+1:!if [i]>=50,break
加入命令前缀NP@，作用为该命令不会进行变量替换。
加入宏的功能。方法为设置格式像函数的变量，相当于自定义函数，用[函数名(变量列表)]调用。例子1:NP@!set 报数(x) !Text 一共完成了[x]次;[报数(n)];。例子2:NP@!set sum(a,b,c,d) [[[a+b]+c]+d];!Text [sum(1,2,3,4)];。如果有多个名称相同参数数量相同的宏，可能会出现错误。如果由名称相同参数数量不同得宏会优先选择调用时参数数量相同的宏。

2.44:加入秒表功能，精度约35毫秒，会临时接管效率统计中的时间一栏用于显示，不影响效率统计。同一时间只能有一个秒表存在，后启动的秒表会覆盖前面的。启动命令为!Alarm(不区分大小写)，格式!alarm 时间,模式。时间单位为秒，可以是小数，最多不能超过49天。模式分为两个字，第一个字表示秒表是往上增加还是往下减小，分别用+和-表示。第二个字表示结束时提醒的方式，分为文字提醒A，弹出窗口提醒M，任务栏图标提醒T，声音提醒S，默认无提醒。示例1:!Alarm 10,+A  示例2:!Alarm 600,-M
限制!for命令中有服务器命令时过快。

2.45:加入公共脚本功能，即多个脚本相同的部分写在一起，作为公共部分。公共脚本载入在主脚本之后，即会覆盖setting的内容，列表项目会加到后面，如果有相同的触发，会优先触发主脚本。公共脚本中也可以定义公共脚本。公共脚本和主脚本需放在一个目录下。
格式：
[Setting]
ShareScript=脚本名.ini

补充说明：公共脚本中不宜使用@goto，因为@goto的触发名是优先判断主脚本的触发名字，除非触发名不重复。
TrigerSet是一个整体，不能把其中一个Triger提出来。
QuickButton只显示主脚本的。

修正编辑脚本会打开主脚本和所有公共脚本。

2.46:加入统计场景物品数量的变量函数 [ecount(参数)]和count用法相同，参数为物品名，可以带通配符。ecount统计不包括玩家自己。
修正count不能使用通配符的问题。修正count自动在末尾加星号的问题。

2.47:加入查看在线玩家功能。
加入聊天频道功能。注意：设置聊天频道以后如果脚本或输入命令非服务器或机器人命令，将默认作为聊天内容发送。

2.48:加入对没有名字的技能的检查。精简寻路成功的提示。

2.49:加入统一动作的功能，暂且叫领队模式。开启方法，控制的号使用!lead id1,id2,id3……命令，设定跟随动作的id列表。设定完成后，该号通过输入或者点击菜单发送的命令（包括触发、循环开关，载入脚本、重载脚本动作，不支持脚本触发的动作），其他号会同时进行动作，控制号选中自己时，被控制号也会选中自己，命令中含有$ID和$Name也会相应替换。取消命令为!lead none。被控制的id客户端最小支持版本号2.49，小于该版本号无法通过点击选择目标，对话菜单部分选项无效。
支持批量工具或者私聊命令中含有$Name和$ID。
技巧：连续的id可以配合[变量]函数range使用。

2.50:
1、变量函数支持面向对象写法，对以前所有函数及以后的函数甚至自定义宏都起作用。
格式：[变量.函数(参数)]或者[[变量].函数(参数)]。效果等同于[函数([变量],参数)]。
并支持递归，[变量.函数1(参数1).函数2(参数2).函数3(参数3)...函数n(参数n)]。
举例：
Cmd=!set s abcefghi;!Text [s.substr([s.find(e)],3)]
Cmd=!set s 1,23,345,6789,90123;!Text [s.at(4).len()]
!set s [uname];!Text [s.substr([s.find(()],8)]
2、变量数组中，如果含有 键:值 类型的元素可以被视为字典。不能使用数字作为键。
at函数可以根据键在字典中查找值。
举例:
Cmd=!set s a:1,b:2,c:3;!Text [s.at(c)];
或
Cmd=!set s a:1,b:2,c:3;!Text [at([s],c)];

3、新数组函数setat，将指定位置的数组元素值设定为新值。
格式：[setat([数组],位置,新值)]或[数组.setat(位置,新值)]。
下面不作说明，所有函数都有这两种调用方法。
位置如果是数字，将数组视为普通数组，整个替换位置处的值，位置从1开始。
位置如果是文字，将数组视为字典，通过查找字典的键，将值替换为新值。如果未查找到原来有这个键，将插入一个新键:值。
举例:
Cmd=!set s 1,2,3,4,5;!Text [s.setat(3,999)];
Cmd=!set s a:1,b:2,c:3,d:4;!Text [s.setat(c,999)];!Text [s.setat(z,888)];
4、!set和!sset支持设置数组或字典内部元素值。
格式：!set 数组.at(位置) 新值
相当于!set 数组 [setat([数组],位置,新值)]

5、新函数key和value，参数是形式 键:值 的字符串，key为提取键，value为提取值。
Cmd=!set a 等级:16;!Text [a.key()];!Text [a.value()];
6、新函数keys和values，参数是字典，keys将字典中所有元素的键提取，组成一个数组，value将字典中所有元素的值提取，组成一个数组。并且可以配合!for in格式使用。
举例:
Cmd=!set s 大米:20,小米:30,玉米:40;!Text [s.keys()];!Text [s.values()];
Cmd=!set s 大米:20,小米:30,玉米:40;!for x in s.keys(),!Text [x];

2.51:加入特殊变量[_alarm]，显示!alarm命令剩余的秒数。

2.52:配合新版批量管理工具，显示对话菜单功能。

2.53:1、!_where命令。
2、内部变量增加一个[_目标]存储当前选中目标的ID。
3、变量函数[status()]可以无参数，参数可以是#1~#8，@@或者id等，战斗中返回当前目标的状态百分数。

2.54:!Num命令格式修正，!Num文字。现在可以是任何文字了，以前只能是数字。
配合新版批量管理工具，能够在远程管理时对话框输入数字文字。

2.55:整合调试版功能。开关为登陆文件中定义 调试=开

2.56:加入内部变量[_skills]，显示玩家技能的数组。

加入控制对话框的命令。@clearmenu、@settitle(文字)、@addmenu(文字,命令)、@showmenu。
@clearmenu:清空原来的对话框
@settitle(文字):设置对话框的标题
@addmenu(文字,命令):添加对话框项目，命令只支持一个，空的命令是返回
@showmenu:添加完成后，刷新显示

2.57:增加文字显示框可以点击的功能，需要文字格式：其他文字{可点击文字|命令}其他文字。命令可以是用冒号分开的多个命令。支持!Text产生的文字和服务器发送来的文字。
比如：是否进入？{确定|/yes},{不要|/no}
颜色暂时没办法改变。

2.58:[enabled(技能名)]变量函数支持高级技能反查基本技能名称。
新增[canenable(技能名)]变量函数。查询可以准备到基本技能上的高级技能或者查询高级技能可以准备的基本技能。返回数组。
新增[skillname(技能名)]变量函数。查询技能的中文名称。
新增[magic(技能名)]变量函数。查询技能拥有的法术。返回数组。
新增[magicname(法术名)]变量函数。查询法术的中文名称。

2.59:各项数据支持64位数据。